package edu.gatech.aristotle.jsretest;
import java.util.*;
import edu.gatech.aristotle.jsretest.cfg.*;

public class RegressionalComparator {
	
	private CFGBuilder origin;
	private CFGBuilder modified;
	private ArrayList<ControlFlowEdge<JsSourceNode> > dangerousEdges=new ArrayList<ControlFlowEdge<JsSourceNode>>();
	private LinkedList<CFGPair> functionsToCompare=new LinkedList<CFGPair>();
	private HashSet<>
	// In the 1997 ACM regression selection paper, another approach to keep
	// track of which entities are visited is employed. I think it is equivalent
	// to this one. But I'm not very sure about this. Subject to discussion.
	private HashSet<ControlFlowEdge<JsSourceNode> > visitedEdges=new HashSet<ControlFlowEdge<JsSourceNode> >();
	
	
	public RegressionalComparator(CFGBuilder originalProgram,CFGBuilder modifiedProgram){
		this.origin=originalProgram;
		this.modified=modifiedProgram;
		compare();
	}
	
	public void compare(){
		CFGPair entry=new CFGPair(origin.getEntryFunctionCFG(),modified.getEntryFunctionCFG());
		functionsToCompare.addLast(entry);
		while(!functionsToCompare.isEmpty()){
			CFGPair currentPair=functionsToCompare.removeFirst();
			compareFunction(currentPair.origin,currentPair.modified);
		}
	}

	private void compareFunction(ControlFlowGraph<JsSourceNode> origin2,
			ControlFlowGraph<JsSourceNode> modified2) {
		
		
	}
	

}

class CFGPair{
	public ControlFlowGraph<JsSourceNode> origin;
	public ControlFlowGraph<JsSourceNode> modified;
	
	public CFGPair(ControlFlowGraph<JsSourceNode> origin,ControlFlowGraph<JsSourceNode> modified){
		this.origin=origin;
		this.modified=modified;
	}
}