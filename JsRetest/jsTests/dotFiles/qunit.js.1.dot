digraph {
"0" [label="[413]: QUnit.assert = {ok: function(result, msg) , equal: function(actual, expected, message) , notEqual: function(actual, expected, message) , deepEqual: function(actual, expected, message) , notDeepEqual: function(actual, expected, message) , strictEqual: function(actual, expected, message) , notStrictEqual: function(actual, expected, message) , \"throws\": function(block, expected, message) };\n"] 
"1" [label="[1067]: window.onerror = function(error, filePath, linerNr) ;\n"] 
"2" [label="[1845]: function inArray(elem, array) \n"] 
"3" [label="[1379]: function removeClass(elem, name) \n"] 
"4" [label="[927]: if (typeof document === \"undefined\" || document.readyState === \"complete\") "] 
"5" [label="[1824]: function getText(elems) \n"] 
"6" [label="[1416]: QUnit.equiv = (function() ());\n"] 
"7" [label="[582]: config = {queue: [], blocking: true, hidepassed: false, reorder: true, altertitle: true, requireExpects: false, urlConfig: [{id: \"noglobals\", label: \"Check for Globals\", tooltip: \"Enabling this will test if any test introduces new properties on the `window` object. Stored as query-strings.\"}, {id: \"notrycatch\", label: \"No try-catch\", tooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings.\"}], modules: {}, begin: [], done: [], log: [], testStart: [], testDone: [], moduleStart: [], moduleDone: []};\n"] 
"8" [label="[1267]: function synchronize(callback, last) \n"] 
"9" [label="[2009]: extend(exports, QUnit);\n"] 
"10" [label="[902]: extend(QUnit.constructor.prototype, {begin: registerLoggingCallback(\"begin\"), done: registerLoggingCallback(\"done\"), log: registerLoggingCallback(\"log\"), testStart: registerLoggingCallback(\"testStart\"), testDone: registerLoggingCallback(\"testDone\"), moduleStart: registerLoggingCallback(\"moduleStart\"), moduleDone: registerLoggingCallback(\"moduleDone\")});\n"] 
"11" [label="[1329]: function diff(a, b) \n"] 
"12" [label="[13]: var QUnit, config, onErrorFnPrev, testId = 0, fileName = (sourceFromStacktrace(0) || \"\").replace(/(:\d+)+\)?/, \"\").replace(/.+\//, \"\"), toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, Date = window.Date, defined = {setTimeout: typeof window.setTimeout !== \"undefined\", sessionStorage: (function() ())};\n"] 
"13" [label="[42]: Test.count = 0;\n"] 
"14" [label="[1873]: QUnit.diff = (function() ());\n"] 
"15" [label="[1252]: function escapeInnerText(s) \n"] 
"16" [label="[1401]: function runLoggingCallbacks(key, scope, args) \n"] 
"17" [label="[667]: extend(window, QUnit);\n"] 
"18" [label="[1206]: function extractStacktrace(e, offset) \n"] 
"19" [label="[666]: if (typeof exports === \"undefined\") "] 
"20" [label="[632]: (function() ());\n"] 
"21" [label="[2008]: if (typeof exports !== \"undefined\") "] 
"22" [label="[44]: Test.prototype = {init: function() , setup: function() , run: function() , teardown: function() , finish: function() , queue: function() };\n"] 
"23" [label="[928]: config.autorun = true;\n"] 
"24" [label="[1345]: function extend(a, b) \n"] 
"25" [label="[305]: QUnit = {module: function(name, testEnvironment) , asyncTest: function(testName, expected, callback) , test: function(testName, expected, callback, async) , expect: function(asserts) , start: function(count) , stop: function(count) };\n"] 
"26" [label="[1058]: addEvent(window, \"load\", QUnit.load);\n"] 
"27" [label="[0]: entry"] 
"28" [label="[1296]: function saveGlobal() \n"] 
"29" [label="[1310]: function checkPollution(name) \n"] 
"30" [label="[1369]: function hasClass(elem, name) \n"] 
"31" [label="[1394]: function registerLoggingCallback(key) \n"] 
"32" [label="[675]: extend(QUnit, {config: config, init: function() , reset: function() , triggerEvent: function(elem, type, event) , is: function(type, obj) , objectType: function(obj) , push: function(result, actual, expected, message) , pushFailure: function(message, source, actual) , url: function(params) , extend: extend, id: id, addEvent: addEvent});\n"] 
"33" [label="[670]: window.QUnit = QUnit;\n"] 
"34" [label="[549]: extend(QUnit, QUnit.assert);\n"] 
"35" [label="[1373]: function addClass(elem, name) \n"] 
"36" [label="[569]: (function() ());\n"] 
"37" [label="[36]: function Test(settings) \n"] 
"38" [label="[1359]: function addEvent(elem, type, fn) \n"] 
"39" [label="[931]: QUnit.load = function() ;\n"] 
"40" [label="[555]: QUnit.raises = QUnit.assert[\"throws\"];\n"] 
"41" [label="[1092]: function done() \n"] 
"42" [label="[1062]: onErrorFnPrev = window.onerror;\n"] 
"43" [label="[564]: QUnit.same = function() ;\n"] 
"44" [label="[561]: QUnit.equals = function() ;\n"] 
"45" [label="[1275]: function process(last) \n"] 
"46" [label="[-1]: exit"] 
"47" [label="[1389]: function id(name) \n"] 
"48" [label="[1244]: function sourceFromStacktrace(offset) \n"] 
"49" [label="[1609]: QUnit.jsDump = (function() ());\n"] 
"50" [label="[1165]: function validTest(test) \n"] 
"0" -> "34" [label=""] 
"1" -> "41" [label=""] 
"2" -> "14" [label=""] 
"3" -> "47" [label=""] 
"4" -> "23" [label="true"] 
"4" -> "39" [label="false"] 
"5" -> "2" [label=""] 
"6" -> "49" [label=""] 
"7" -> "20" [label=""] 
"8" -> "45" [label=""] 
"9" -> "46" [label=""] 
"10" -> "4" [label=""] 
"11" -> "24" [label=""] 
"12" -> "37" [label=""] 
"13" -> "22" [label=""] 
"14" -> "21" [label=""] 
"15" -> "8" [label=""] 
"16" -> "6" [label=""] 
"17" -> "33" [label=""] 
"18" -> "48" [label=""] 
"19" -> "17" [label="true"] 
"19" -> "32" [label="false"] 
"20" -> "19" [label=""] 
"21" -> "9" [label="true"] 
"21" -> "46" [label="false"] 
"22" -> "25" [label=""] 
"23" -> "39" [label=""] 
"24" -> "38" [label=""] 
"25" -> "0" [label=""] 
"26" -> "42" [label=""] 
"27" -> "12" [label=""] 
"28" -> "29" [label=""] 
"29" -> "11" [label=""] 
"30" -> "35" [label=""] 
"31" -> "16" [label=""] 
"32" -> "10" [label=""] 
"33" -> "32" [label=""] 
"34" -> "40" [label=""] 
"35" -> "3" [label=""] 
"36" -> "7" [label=""] 
"37" -> "13" [label=""] 
"38" -> "30" [label=""] 
"39" -> "26" [label=""] 
"40" -> "44" [label=""] 
"41" -> "50" [label=""] 
"42" -> "1" [label=""] 
"43" -> "36" [label=""] 
"44" -> "43" [label=""] 
"45" -> "28" [label=""] 
"47" -> "31" [label=""] 
"48" -> "15" [label=""] 
"49" -> "5" [label=""] 
"50" -> "18" [label=""] 
}
